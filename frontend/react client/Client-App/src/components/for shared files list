"use client"

import type React from "react"
import { useEffect, useState } from "react"
import {
  Box,
  Typography,
  Grid,
  CircularProgress,
  List,
  ListItem,
  Avatar,
  Paper,
  Tooltip,
  IconButton,
  useMediaQuery,
  useTheme,
} from "@mui/material"
import {
  FileText,
  FileImage,
  FileVideo,
  FileIcon as FilePdf,
  File,
  FileSpreadsheet,
  FileCode,
  FileArchive,
  FileAudio,
  FolderOpen,
  RefreshCw,
} from "lucide-react"
import { motion } from "framer-motion"
import FileCard from "./file-card"
import ToggleViewSelector from "./toggle-button-group"

// Mock types and functions for demo
interface MyFile {
  id: number
  fileName: string
  fileType: string
  fileSize: number
  fileKey: string
  isStarred: boolean
  uploadDate?: string
  author?: {
    username: string
    email: string
  }
}

// Mock utility functions
const formatFileSize = (bytes: number): string => {
  if (bytes < 1024) return bytes + " B"
  if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + " KB"
  return (bytes / (1024 * 1024)).toFixed(1) + " MB"
}

const formatDate = (dateString: string): string => {
  const date = new Date(dateString)
  return date.toLocaleDateString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  })
}

const stringToColor = (string: string): string => {
  let hash = 0
  for (let i = 0; i < string.length; i++) {
    hash = string.charCodeAt(i) + ((hash << 5) - hash)
  }
  let color = "#"
  for (let i = 0; i < 3; i++) {
    const value = (hash >> (i * 8)) & 0xff
    color += ("00" + value.toString(16)).substr(-2)
  }
  return color
}

const getFileIcon = (fileType: string) => {
  if (fileType.startsWith("image/")) return <FileImage size={20} color="#10a37f" />
  if (fileType === "application/pdf") return <FilePdf size={20} color="#e74c3c" />
  if (fileType.startsWith("video/")) return <FileVideo size={20} color="#3498db" />
  if (fileType.startsWith("audio/")) return <FileAudio size={20} color="#9b59b6" />
  if (fileType.includes("spreadsheet") || fileType.includes("excel") || fileType.includes("xlsx"))
    return <FileSpreadsheet size={20} color="#27ae60" />
  if (fileType.includes("zip") || fileType.includes("rar") || fileType.includes("tar") || fileType.includes("gz"))
    return <FileArchive size={20} color="#f39c12" />
  if (
    fileType.includes("html") ||
    fileType.includes("css") ||
    fileType.includes("javascript") ||
    fileType.includes("json")
  )
    return <FileCode size={20} color="#2c3e50" />
  if (fileType.includes("text") || fileType.includes("doc") || fileType.includes("word"))
    return <FileText size={20} color="#3498db" />
  return <File size={20} color="#95a5a6" />
}

// Mock data
const mockSharedFiles: MyFile[] = [
  {
    id: 1,
    fileName: "Project Proposal.pdf",
    fileType: "application/pdf",
    fileSize: 2500000,
    fileKey: "project-proposal",
    isStarred: true,
    uploadDate: "2023-12-15T10:30:00Z",
    author: { username: "john", email: "john@example.com" },
  },
  {
    id: 2,
    fileName: "Team Meeting Notes.docx",
    fileType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    fileSize: 1200000,
    fileKey: "meeting-notes",
    isStarred: false,
    uploadDate: "2023-12-10T14:20:00Z",
    author: { username: "sarah", email: "sarah@example.com" },
  },
  {
    id: 3,
    fileName: "Marketing Campaign.jpg",
    fileType: "image/jpeg",
    fileSize: 3200000,
    fileKey: "marketing-campaign",
    isStarred: false,
    uploadDate: "2023-12-05T09:15:00Z",
    author: { username: "mike", email: "mike@example.com" },
  },
  {
    id: 4,
    fileName: "Q4 Financial Report.xlsx",
    fileType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    fileSize: 1800000,
    fileKey: "financial-report",
    isStarred: true,
    uploadDate: "2023-12-01T16:45:00Z",
    author: { username: "lisa", email: "lisa@example.com" },
  },
]

const MotionBox = motion(Box)
const MotionPaper = motion(Paper)

const SharedFilesList: React.FC = () => {
  const [loading, setLoading] = useState(true)
  const [isGridView, setIsGridView] = useState(true)
  const [sharedFiles, setSharedFiles] = useState<MyFile[]>([])
  const theme = useTheme()
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"))

  // Mock user for demo
  const user = { id: 1, username: "demo_user" }

  useEffect(() => {
    // Simulate API call
    const timer = setTimeout(() => {
      setSharedFiles(mockSharedFiles)
      setLoading(false)
    }, 1500)

    return () => clearTimeout(timer)
  }, [])

  const handleViewChange = (newView: string | null) => {
    if (newView !== null) {
      setIsGridView(newView === "grid")
    }
  }

  const handleRefresh = () => {
    setLoading(true)
    // Simulate API call
    setTimeout(() => {
      setSharedFiles(mockSharedFiles)
      setLoading(false)
    }, 1500)
  }

  return (
    <MotionBox initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5 }}>
      <Paper
        elevation={0}
        sx={{
          p: { xs: 2, sm: 3 },
          borderRadius: 3,
          mb: 3,
          border: "1px solid #eaeaea",
        }}
      >
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            flexDirection: { xs: "column", sm: "row" },
            gap: { xs: 2, sm: 0 },
          }}
        >
          <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
            <Typography variant="h5" sx={{ fontWeight: 600, color: "#333" }}>
              Shared Files
            </Typography>
            <Tooltip title="Refresh">
              <IconButton
                size="small"
                onClick={handleRefresh}
                sx={{
                  color: "#666",
                  "&:hover": { color: "#10a37f", backgroundColor: "rgba(16, 163, 127, 0.08)" },
                }}
              >
                <RefreshCw size={18} />
              </IconButton>
            </Tooltip>
          </Box>

          <ToggleViewSelector isGridView={isGridView} onViewChange={handleViewChange} />
        </Box>
      </Paper>

      {loading ? (
        <Box sx={{ display: "flex", justifyContent: "center", alignItems: "center", py: 8 }}>
          <CircularProgress sx={{ color: "#10a37f" }} />
        </Box>
      ) : !sharedFiles || sharedFiles.length === 0 ? (
        <MotionBox
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          sx={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            py: 8,
          }}
        >
          <Box
            sx={{
              width: 80,
              height: 80,
              borderRadius: "50%",
              backgroundColor: "rgba(16, 163, 127, 0.1)",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              mb: 3,
            }}
          >
            <FolderOpen size={40} color="#10a37f" />
          </Box>
          <Typography variant="h6" sx={{ mb: 1, fontWeight: 600 }}>
            No files have been shared with you
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 3, textAlign: "center", maxWidth: 400 }}>
            When someone shares files with you, they will appear here
          </Typography>
        </MotionBox>
      ) : isGridView ? (
        <Box sx={{ mt: 3 }}>
          <Grid container spacing={3}>
            {sharedFiles.map((file) => (
              <Grid item xs={12} sm={6} md={4} lg={3} key={file.id}>
                <FileCard file={file} userId={user.id} />
              </Grid>
            ))}
          </Grid>
        </Box>
      ) : (
        <Paper
          elevation={0}
          sx={{
            border: "1px solid #eaeaea",
            borderRadius: 3,
            overflow: "hidden",
            mt: 3,
          }}
        >
          <List disablePadding>
            <ListItem
              sx={{
                backgroundColor: "#f9f9f9",
                borderBottom: "1px solid #eaeaea",
                py: 1.5,
                px: 3,
                display: "grid",
                gridTemplateColumns: {
                  xs: "3fr 1fr",
                  md: "3fr 1fr 1fr 1fr",
                },
              }}
            >
              <Typography variant="subtitle2" sx={{ fontWeight: 600, color: "#666" }}>
                Name
              </Typography>
              <Typography
                variant="subtitle2"
                sx={{
                  fontWeight: 600,
                  color: "#666",
                  display: { xs: "none", md: "block" },
                }}
              >
                Size
              </Typography>
              <Typography
                variant="subtitle2"
                sx={{
                  fontWeight: 600,
                  color: "#666",
                  display: { xs: "none", md: "block" },
                }}
              >
                Last Update
              </Typography>
              <Typography variant="subtitle2" sx={{ fontWeight: 600, color: "#666" }}>
                Owner
              </Typography>
            </ListItem>

            {sharedFiles.map((file, index) => (
              <MotionBox
                component={ListItem}
                key={file.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3, delay: index * 0.05 }}
                sx={{
                  borderBottom: "1px solid #eaeaea",
                  py: 1.5,
                  px: 3,
                  display: "grid",
                  gridTemplateColumns: {
                    xs: "3fr 1fr",
                    md: "3fr 1fr 1fr 1fr",
                  },
                  "&:hover": {
                    backgroundColor: "#f9f9f9",
                  },
                }}
              >
                <Box sx={{ display: "flex", alignItems: "center" }}>
                  {getFileIcon(file.fileType)}
                  <Typography
                    variant="body2"
                    sx={{
                      color: "#333",
                      fontWeight: 500,
                      ml: 2,
                      whiteSpace: "nowrap",
                      overflow: "hidden",
                      textOverflow: "ellipsis",
                    }}
                  >
                    {file.fileName}
                  </Typography>
                </Box>

                <Typography
                  variant="body2"
                  sx={{
                    color: "#666",
                    display: { xs: "none", md: "block" },
                  }}
                >
                  {file.fileSize ? formatFileSize(file.fileSize) : "—"}
                </Typography>

                <Typography
                  variant="body2"
                  sx={{
                    color: "#666",
                    display: { xs: "none", md: "block" },
                  }}
                >
                  {file.uploadDate ? formatDate(file.uploadDate) : "—"}
                </Typography>

                <Box sx={{ display: "flex", alignItems: "center" }}>
                  <Avatar
                    sx={{
                      bgcolor: file.author?.username ? stringToColor(file.author.username) : "#10a37f",
                      width: 28,
                      height: 28,
                      fontSize: "0.9rem",
                      mr: 1,
                    }}
                  >
                    {file.author?.username ? file.author.username[0].toUpperCase() : "?"}
                  </Avatar>
                  <Typography
                    variant="body2"
                    sx={{
                      color: "#666",
                      whiteSpace: "nowrap",
                      overflow: "hidden",
                      textOverflow: "ellipsis",
                    }}
                  >
                    {file.author?.email || "—"}
                  </Typography>
                </Box>
              </MotionBox>
            ))}
          </List>
        </Paper>
      )}
    </MotionBox>
  )
}

export default SharedFilesList

